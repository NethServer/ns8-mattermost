#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import sys
import agent
import os

# Connect the local Redis replica. This is necessary to consistently start
# the service if the leader node is not reachable:
rdb = agent.redis_connect(use_replica=True)
smtp_settings = agent.get_smarthost_settings(rdb)


envfile = "smarthost.env"

# Do not write the env file if smarthost is not configured
if not smtp_settings['host']:
    try:
        os.unlink(envfile)
    except:
        pass
    sys.exit(0)

# Using .tmp suffix: do not overwrite the target file until the new one is
# saved to disk:
with open(envfile + ".tmp", "w") as efp:
    print(f"MM_EMAILSETTINGS_SENDEMAILNOTIFICATIONS={'true' if smtp_settings['enabled'] else 'false'}", file=efp)
    print(f"MM_EMAILSETTINGS_SMTPSERVER={smtp_settings['host']}", file=efp)
    print(f"MM_EMAILSETTINGS_SMTPPORT={smtp_settings['port']}", file=efp)
    print(f"MM_EMAILSETTINGS_ENABLESMTPAUTH=true", file=efp)
    print(f"MM_EMAILSETTINGS_SMTPUSERNAME={smtp_settings['username']}", file=efp)
    print(f"MM_EMAILSETTINGS_SMTPPASSWORD={smtp_settings['password']}", file=efp)
    if smtp_settings['encrypt_smtp'] == 'tls':
        print(f"MM_EMAILSETTINGS_CONNECTIONSECURITY=TLS", file=efp)
    elif smtp_settings['encrypt_smtp'] == 'starttls':
        print(f"MM_EMAILSETTINGS_CONNECTIONSECURITY=STARTTLS", file=efp)
    print(f"MM_EMAILSETTINGS_SKIPSERVERCERTIFICATEVERIFICATION={'true' if smtp_settings['tls_verify'] else 'false'}", file=efp)

# Commit changes by replacing the existing envfile:
os.replace(envfile + ".tmp", envfile)
